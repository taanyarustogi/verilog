module adder(a, b, c_i, s, c_o);
	input a, b, c_i; 
	output s, c_o;
	assign s = (a^b^c_i);
	assign c_o = (a&b) | (c_i&a) | (c_i&b);
endmodule


module part2(a, b, c_in, s, c_out);
	input [3:0]a;
	input [3:0]b;
	input c_in;
	output [3:0]s;
	output [3:0]c_out;

	adder FA1 (
		.a(a[0]),
		.b(b[0]),
		.c_i(c_in),
		.s(s[0]),
		.c_o(c_out[0])
	);

	adder FA2 (
		.a(a[1]),
		.b(b[1]),
		.c_i(c_out[0]),
		.s(s[1]),
		.c_o(c_out[1])
	);

	adder FA3 (
		.a(a[2]),
		.b(b[2]),
		.c_i(c_out[1]),
		.s(s[2]),
		.c_o(c_out[2])
	);

	adder FA4 (
		.a(a[3]),
		.b(b[3]),
		.c_i(c_out[2]),
		.s(s[3]),
		.c_o(c_out[3])
	);
endmodule
